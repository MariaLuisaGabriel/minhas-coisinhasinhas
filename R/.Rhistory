juju<-18
jorel<-7
moeda<-0
while(juju!=0 & jorel!=0)
{
moeda<-sample(0:1,1) #ou sample(c("cara","coroa"),1)
if(moeda==0) #cara
{
juju<-juju-1
jorel<-jorel+1
}
if(moeda==1) #coroa
{
jorel<-jorel-1
juju<-juju+1
}
}
if(jorel==0)
{
vencedor<-c(vencedor,1) #juju = 1
}else
{
vencedor<-c(vencedor,0) #joel = 0
}
acumulado3<-c(acumulado3,mean(vencedor))
}
mean(vencedor)
plot(x = 1:1000,y = acumulado3,type='l')
abline(h = 0.70,col = 'brown')
#7
pessoas<-c(1,2,3,4)
resultado<-c()
for(j in 1:100000){
i<-0
sorteio<-sample(1:4,4,False)
while(i<4){
if(pessoas[i]==sorteio[i]){
resultado<-c(resultado,0)
break
}
i<-i+1
}
if(length(resultado)<j){
resultado<-c(resultado,1)
}
}
#7
pessoas<-c(1,2,3,4)
resultado<-c()
for(j in 1:100000){
i<-0
sorteio<-sample(1:4,4)
while(i<4){
if(pessoas[i]==sorteio[i]){
resultado<-c(resultado,0)
break
}
i<-i+1
}
if(length(resultado)<j){
resultado<-c(resultado,1)
}
}
mean(resultado)
#7
pessoas<-c(1,2,3,4)
resultado<-c()
for(j in 1:100000){
i<-1
sorteio<-sample(1:4,4)
while(i<4){
if(pessoas[i]==sorteio[i]){
resultado<-c(resultado,0)
break
}
i<-i+1
}
if(length(resultado)<j){
resultado<-c(resultado,1)
}
}
mean(resultado)
mean(resultado)
#8
num.impar = function(v){
x<-length(v)
contador<-0
for(j in 1:v){
if(v[j]%%2==1){
contador<-contador+1
}
}
return(contador)
}
num.impar(1,2,3,4)
num.impar(1 2 3 4 5)
num.impar([1,2,3,4])
num.impar(c(1,2,3,4,5,6,7))
#8
num.impar = function(v[]){
num.impar(c(1,2,3,4))
#8
v<-c()
num.impar = function(v){
x<-length(v)
contador<-0
for(j in 1:v){
if(v[j]%%2==1){
contador<-contador+1
}
}
return(contador)
}
num.impar(c(1,2,3,4,5))
#8
num.impar = function(v[]){
#8
num.impar = function(v<-c()){
#8
num.impar = function(v){
x<-length(v)
contador<-0
for(j in 1:x){
if(v[j]%%2==1){
contador<-contador+1
}
}
return(contador)
}
#8
v<-c(1,2,3,4,5,6)
num.impar = function(v){
x<-length(v)
contador<-0
for(j in 1:x){
if(v[j]%%2==1){
contador<-contador+1
}
}
return(contador)
}
contador
contador
#8
v<-c(1,2,3,4,5,6)
num.impar = function(v){
x<-length(v)
contador<-0
for(j in 1:x){
if(v[j]%%2==1){
contador<-contador+1
}
}
return(contador)
}
num.impar
contador
#8
v<-c(1,2,3,4,5,6)
x<-length(v)
contador<-0
for(j in 1:x){
if(v[j]%%2==1){
contador<-contador+1
}
}
contador
num.impar = function(v) deparse(substitute(x)) {
#8
v <- readline(prompt="escreva o vetor: ")
v[1]
#8
v <- scan(what = int())
#8
v <- scan(what = list)
#8
v <- scan(list)
#8
v <- scan("",list)
#8
v <- scan()
v
v[1]
#8
v <- c()
num.impar = function(v) {
v<-scan()
x<-length(v)
contador<-0
for(j in 1:x){
if(v[j]%%2==1){
contador<-contador+1
}
}
return(contador)
}
num.impar(v)
if(s==7 | s==11) resultados <- c(resultados,1)
else if(s==2 | s==3 | s==12) resultados <- c(resultados,0)
else
if(s==7 | s==11)
{resultados <- c(resultados,1)}else
if(s==2 | s==3 | s==12) {resultados <- c(resultados,0)}else
#9
dado1 <- 0
dado1 <- 0
s2<-0
resultados<-c()
for(j in 1000)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
s2<-s
if(s==7 | s==11)
{
resultados <- c(resultados,1)
}else{
if(s==2 | s==3 | s==12)
{
resultados <- c(resultados,0)
}else
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
while(s!=7 | s!=s2)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
}
if(s==7) c(resultados,0)
if(s==s2) c(resultados,1)
}
}
}
#9
dado1 <- 0
dado1 <- 0
s2<-0
resultados<-c()
for(j in 1:1000)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
s2<-s
if(s==7 | s==11)
{
resultados <- c(resultados,1)
}else{
if(s==2 | s==3 | s==12)
{
resultados <- c(resultados,0)
}else
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
while(s!=7 | s!=s2)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
}
if(s==7) c(resultados,0)
if(s==s2) c(resultados,1)
}
}
}
#9
dado1 <- 0
dado1 <- 0
s2<-0
resultados<-c()
for(j in 1:1000)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
s2<-s
if(s==7 | s==11)
{
resultados <- c(resultados,1)
}else{
if(s==2 | s==3 | s==12)
{
resultados <- c(resultados,0)
}else
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
while(s!=7 | s!=s2)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
}
if(s==7) c(resultados,0)
if(s==s2) c(resultados,1)
}
}
}
s==7
dado1+dado2
s==7 | s==11
s2<-s
#9
dado1 <- 0
dado1 <- 0
s2<-0
resultados<-c()
for(j in 1:1000)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
s2<-s
if(s==7 | s==11)
{
resultados <- c(resultados,1)
}else{
if(s==2 | s==3 | s==12)
{
resultados <- c(resultados,0)
}
}
}
dado1 <- 0
s2<-0
resultados<-c()
for(j in 1:1000)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
s2<-s
if(s==7 | s==11)
{
resultados <- c(resultados,1)
}else{
if(s==2 | s==3 | s==12)
{
resultados <- c(resultados,0)
}else
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
while(s!=7 && s!=s2)
{
dado1 <- sample(1:6,1)
dado2 <- sample(1:6,1)
s<-dado1+dado2
}
if(s==7) c(resultados,0)
if(s==s2) c(resultados,1)
}
}
}
mean(resultados)
iris # tabela ja embutida no programa
indices <- sample(1:nrow(iris),size = (nrow(iris)),replace = FALSE)
sample(150)
iris<-iris[indices,] #embaralhar as linhas da tabela
n<-round(nrow(iris)*0.8) #pega 80% das iris
n
treinamento<-iris[1:n,] #separa 80% das iris
teste<-iris[(n+1):nrow(iris),] #deixa os 20% em outra variavel
boxplot(treinamento$Petal.length)
boxplot(treinamento$Petal.Length)
a<-boxplot(treinamento$Petal.Length)
a$stats
order(treinamento$Petal.Length)
length(treinamento$Petal.Length)
b<-length(treinamento$Petal.Length)
mediana<-((order(treinamento$Petal.Length)[b/2]+order(treinamento$Petal.Length)[b/2+1]))/2
mediana
mediana<-((treinamento$Petal.Length[order(treinamento$Petal.Length)[b/2]]+treinamento$Petal.Length[order(treinamento$Petal.Length)[b/2+1]]))/2
prim_quartio<-((treinamento$Petal.Length[order(treinamento$Petal.Length)[b/4]]+treinamento$Petal.Length[order(treinamento$Petal.Length)[b/4+1]]))/2
terc_quartio<-((treinamento$Petal.Length[order(treinamento$Petal.Length)[3*b/4]]+treinamento$Petal.Length[order(treinamento$Petal.Length)[3*b/4+1]]))/2
#usando sort:
c<-sort(treinamento$Petal.Length)
mediana<-c[b/2]+c[b/2+1]/2
mediana<-c[b/2]+c[(b/2)+1]/2
mediana<-(c[b/2]+c[b/2+1])/2
prim_quartio<-(c[b/4]+c[b/4+1])/2
terc_quartio<-(c[3*b/4]+c[3*b/4+1])/2
setosa<-treinamento[treinamento$Species == "setosa",] # so as setosa
virginica<-treinamento[treinamento$Species == "virginica",] # so as virginica
versicolor<-treinamento[treinamento$Species == "versicolor",] # so as versicolor
boxplot(setosa$Petal.Length, versicolor$Petal.Length, virginica$Petal.Length, names = c("setosa","versicolor","virginica"))
boxplot(setosa$Sepal.Width, versicolor$Sepal.Width, virginica$Sepal.Width, names = c("setosa","versicolor","virginica"))
par(mfrow = c(1,2))
boxplot(setosa$Petal.Length, versicolor$Petal.Length, virginica$Petal.Length, names = c("setosa","versicolor","virginica"))
boxplot(setosa$Sepal.Width, versicolor$Sepal.Width, virginica$Sepal.Width, names = c("setosa","versicolor","virginica"))
# boxplot() => grafico-caixa, mostra o valor minimo e maximo que a variavel pode alcançar (por linhas horizontais), e alem disso, a caixa em si representa 50% dos valores que a variável pode ter
# linha preta: mediana
# linha mais baixa da caixa: primeiro quartio
# linha mais alta da caixa: terceiro quartio
iris # tabela ja embutida no programa
indices <- sample(1:nrow(iris),size = (nrow(iris)),replace = FALSE)
sample(150)
iris<-iris[indices,] #embaralhar as linhas da tabela
n<-round(nrow(iris)*0.8) #pega 80% das iris
n
treinamento<-iris[1:n,] #separa 80% das iris
teste<-iris[(n+1):nrow(iris),] #deixa os 20% em outra variavel
a<-boxplot(treinamento$Petal.Length)
a$stats
order(treinamento$Petal.Length) #poderia ter usado o sort (ordena o vetor e muda a posiçao dos valores, enquanto o order so mostra as posiçoes dos elementos), mas esqueci KKKKKKKK
b<-length(treinamento$Petal.Length)
#n/2 - ésimo elemento + n/2+1 - ésimo elemento (pensando que eu não conheço o tamanho, mas sei que é par)
mediana<-((treinamento$Petal.Length[order(treinamento$Petal.Length)[b/2]]+treinamento$Petal.Length[order(treinamento$Petal.Length)[b/2+1]]))/2
#n/4 - ésimo elemento + n/4+1 - ésimo elemento (pensando que eu não conheço o tamanho, mas sei que é par)
prim_quartio<-((treinamento$Petal.Length[order(treinamento$Petal.Length)[b/4]]+treinamento$Petal.Length[order(treinamento$Petal.Length)[b/4+1]]))/2
#3*n/4 - ésimo elemento + 3*n/4+1 - ésimo elemento (pensando que eu não conheço o tamanho, mas sei que é par)
terc_quartio<-((treinamento$Petal.Length[order(treinamento$Petal.Length)[3*b/4]]+treinamento$Petal.Length[order(treinamento$Petal.Length)[3*b/4+1]]))/2
#usando sort:
c<-sort(treinamento$Petal.Length)
mediana<-(c[b/2]+c[b/2+1])/2
prim_quartio<-(c[b/4]+c[b/4+1])/2
terc_quartio<-(c[3*b/4]+c[3*b/4+1])/2
setosa<-treinamento[treinamento$Species == "setosa",] # so as setosa
virginica<-treinamento[treinamento$Species == "virginica",] # so as virginica
versicolor<-treinamento[treinamento$Species == "versicolor",] # so as versicolor
par(mfrow = c(1,2))
boxplot(setosa$Petal.Length, versicolor$Petal.Length, virginica$Petal.Length, names = c("setosa","versicolor","virginica"))
boxplot(setosa$Sepal.Width, versicolor$Sepal.Width, virginica$Sepal.Width, names = c("setosa","versicolor","virginica"))
setwd("C:/Users/maria luisa/OneDrive/Documentos/dev/minhas-coisinhasinhas/R")
olive <- read.table(olive,sep = ",")
olive <- read.table("olive.txt,sep = ",")
olive <- read.table("olive.txt",sep = ",")
olive <- read.table("olive.txt",sep = ",")
View(olive)
embaraia <- sample(1:length(olive),length(olive),replace = FALSE)
embaraia <- sample(1:length(olive[,1]),length(olive[,1]),replace = FALSE)
embaraia <- sample(1:nrow(olive),length(olive[,1]),replace = FALSE)
olive<-olive[embaraia,]
n<-round(nrow(olive)*0.8)
View(olive)
n<-round(nrow(olive)*0.8)
treino<-olive[1:n,]
treino2<-olive[(n+1):nrow(olive)]
treino2<-olive[(n+1):nrow(olive),]
View(olive)
plot(treino$region,treino$eicosenoic)
plot(x= treino$region,y= treino$eicosenoic)
sardinia<-olive$region[olive$region == "sardinia",]
sardinia<-olive[olive$region == "sardinia",]
south<-olive[olive$region == "Southern Italy",]
north<-olive[olive$region == "Northern Italy",]
plot(sardinia$palmitic,sardinia$linoleic)
boxplot(sardinia$palmitic,sardinia$palmitoleic)
boxplot(sardinia$palmitic)
plot(sardinia$palmitic,y=sardinia$palmitoleic)
plot(sardinia$palmitic,y=sardinia$palmitoleic,xlim = c(0,20))
plot(sardinia$palmitic,y=sardinia$palmitoleic,xlim = c(0,20),ylim = c(0,3))
treino$palmitic = as.factor(treino$palmitic)
sardinia<-olive[olive$region == "sardinia",]
south<-olive[olive$region == "Southern Italy",]
north<-olive[olive$region == "Northern Italy",]
treino$palmitic = as.factor(treino$palmitic)
treino$linoleic = as.factor(treino$linoleic)
sardinia<-olive[olive$region == "Sardinia",]
south<-olive[olive$region == "Southern Italy",]
north<-olive[olive$region == "Northern Italy",]
plot(sardinia$palmitic,sardinia$linoleic)
plot(treino$palmitic,treino$linoleic)
plot(treino$palmitic,treino$linoleic)
plot(treino$palmitic,treino$linoleic)
plot(treino$palmitic,treino$linoleic,type = 'n')
points(sardinia$palmitic,sardinia$linoleic)
boxplot(sardinia$palmitic,south$palmitic,north$palmitic)
boxplot(sardinia$palmitoleic,south$palmitoleic,north$palmitoleic)
boxplot(sardinia$stearic,south$stearic,north$stearic)
boxplot(sardinia$oleic,south$oleic,north$oleic)
boxplot(sardinia$linoleic,south$linoleic,north$linoleic)
boxplot(sardinia$arachidic,south$arachidic,north$arachidic)
boxplot(sardinia$eicosenoic,south$eicosenoic,north$eicosenoic)
boxplot(sardinia$arachidic,south$arachidic,north$arachidic)
boxplot(sardinia$oleic,south$oleic,north$oleic)
boxplot(sardinia$oleic,south$oleic,north$oleic)$stats
par(c(1,2))
hist(sardinia$oleic)
hist(north$oleic)
par(mfrow = c(1,2))
hist(sardinia$oleic)
hist(north$oleic)
treinamento<-iris[1:n,] #separa 80% das iris
teste<-iris[(n+1):nrow(iris),] #deixa os 20% em outra variavel
mean(previsao == treino2$region)
previsao<-c()
for(j in 1:nrow(treino2))
{
if(treino2$eicosenoic[j]>0.1)
{
previsao[j] <- "Southern Italy"
}else
{
if(treino2$oleic[j]<74)
{
previsao[j]<- "North Italy"
}else
{
previsao[j]<- "Sardinia"
}
}
}
mean(previsao == treino2$region)
